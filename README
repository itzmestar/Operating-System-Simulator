INFO
======================
oss is the main program and serve as the master process. operating system simulator (call the
executable oss) can be started as one main process which will start by forking a number of processes. Later, it will fork new children
as some terminate.

oss maintains its own system clock. oss will start by first allocating shared memory for a
clock that only it will increment (write/modify). The child processes are able to view this memory but will not
increment it (readonly). This shared memory clock is of two integers, with one integer to hold seconds and the other
integer to hold nanoseconds. If one integer has 5 and the other has 10000 then that would mean that the clock is showing
5 seconds and 10000 nanoseconds. This clock is initialized to 0 by oss.
In addition to the clock in shared memory, there is an additional area of shared memory allocated to allow the
child processes to send information to oss. This area is shm_msg.
With the clock at zero, oss should fork the appropriate number of child processes to start. Then it enters into
a loop. Every iteration of that loop, it increments the clock (simulating time passing in our system). While in this
loop, oss checks shm_msg. If it has been sent a message from a child, it outputs the contents of that message (which
should be a set of two integers, a value in our clock) to logfile. If there is a message in shm_msg, that means that the child
process is terminating, oss then forks an another child and clears shm_msg. This process continues until the executable has been
running for the maximum time allotted (in real seconds). At that point, the master terminates all children and then
itself, while making sure to clean up any shared memory and semaphores it is using.

The logfile contains following information:
Master: Child pid is terminating at time xx.yy because it reached mm.nn in slave
Master: Child pid is terminating at time xx.yy because it reached mm.nn in slave
Master: Child

There are 5 files icluded in this project.
1. oss.c
2. child.c
3. makefile
4. global.h
5. global.c

oss.c: this is the main program source code.
	there are functions used in this file which are defined in global.c & declared in global.h
	oss is the executable binary for this source code.
	oss creates two shared memories: shm_msg & ShmCLOCK. It also creates a semaphore: clock_sem_set_id to ensure
	atomic operations on these shared memories. Reading the same memory space by multiple thread of execution is not 
	a problem. But one thread trying to modify the memory & other trying to read may incur inconsistancies.
	
	oss spawns a number of new child processes using fork & stores their pid in an integer array. During its execution, oss 
	keeps on updating the clock in shared memory & read if there is any message in shm_msg. shm_msg message means a child terminated. 
	As these child process exits, oss makes	sure to create new childs until the execution time is up for oss itself.
	Once the execution time is up, oss kills all the child process by sending them SIGQUIT signal & releases all the shared 
	memories as well as semaphores.
	oss also handles any Ctrl + C signal generated by terminal gracefully & terminate itself.

child.c: this is the child program source code.
	there are functions used in this file which are defined in global.c & declared in global.h
	child process starts up with reading the clock maintained by the oss program in the shared memory.
	then it generates a random number between 1 & 1000000. adding this random number to the initial clock gives the terminating 
	time for child process.
	After this, child process continuously tries to take a lock on shared memory clock & read it until its time is up.
	once the time is up, it puts a message in the shm_msg shared memory provided there isn't a message already in it. If there is 
	already a message then child process releases the lock & waits again.
	Once it is successfully written the message, it terminates itself.
	Also child has signal handling that if it receives a SIGQUIT signal then it terminates itself gracefully.

makefile: is a normal make command file. 
	giving the make appropriate commands to create objects and targets, resolving dependencies.
	
global.h: this is the common header file, providing the declaration of function which are used by both oss.c & child.c

global.c: this file provides the definition of common functions used by oss.c & child.c

==============================================================================
How to compile:
	# make clean
	# make all

How to run:
	# ./oss
	
	above will run with default values.

To get help on with more options:
	# ./oss -h
===============================================================================
Usage: ./oss [-s x] [-l filename] [-t z]
Options:
        -h              Prints usage on screen with options and exits.
        -s x            Number of child processes oss should create at startup. Default is 5.
        -l filename     Logfile name for oss. Default is ./oss.log file.
        -t z            Number of seconds oss should run. Default is 20.

===============================================================================
